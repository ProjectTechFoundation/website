---
import FormInput from '../ui/FormInput.astro';
import FormTextarea from '../ui/FormTextarea.astro';
---

<section class="py-20 bg-white">
  <div class="max-w-3xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="text-center">
      <h1 class="text-4xl font-extrabold text-gray-900 sm:text-5xl">Contact Us</h1>
      <p class="mt-4 text-xl text-gray-600">Have questions? We'd love to hear from you.</p>
    </div>

    <form 
      action="https://docs.google.com/forms/d/e/1FAIpQLSfiVTZscGOuRi8No7-IFg1prUi7tNL192czOy2a5erLqguZFw/formResponse" 
      method="POST" 
      class="mt-12 space-y-8"
      id="contact-form"
      novalidate
    >
      <!-- Full Name -->
      <FormInput
        id="name"
        name="entry.2005620554"
        label="Full Name *"
        required
      />

      <!-- Email -->
      <FormInput
        id="email"
        name="entry.1045781291"
        type="email"
        label="Email Address *"
        required
      />

      <!-- Subject -->
      <FormInput
        id="subject"
        name="entry.1166974658"
        label="Subject *"
        required
      />

      <!-- Message -->
      <FormTextarea
        id="message"
        name="entry.1783335816"
        label="Message *"
        required
      />

      <!-- Submit Button -->
      <div class="text-center">
        <button 
          type="submit" 
          class="inline-flex items-center px-6 py-3 border border-transparent text-base font-medium rounded-md text-white bg-primary hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary"
        >
          Send Message
        </button>
      </div>

      <!-- Error and Success Messages (below the button) -->
      <div id="error-message" class="hidden mt-6">
        <div class="flex items-center justify-center text-red-600 bg-red-50 p-4 rounded-md">
          <svg class="w-6 h-6 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path 
              stroke-linecap="round" 
              stroke-linejoin="round" 
              stroke-width="2" 
              d="M6 18L18 6M6 6l12 12"
            ></path>
          </svg>
          <span><strong>Error:</strong> Please fill out all required fields before submitting.</span>
        </div>
      </div>

      <div id="success-message" class="hidden mt-6">
        <div class="flex items-center justify-center text-green-600 bg-green-50 p-4 rounded-md">
          <svg class="w-6 h-6 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path 
              stroke-linecap="round" 
              stroke-linejoin="round" 
              stroke-width="2" 
              d="M5 13l4 4L19 7"
            ></path>
          </svg>
          <span>Thank you! Your message has been sent successfully.</span>
        </div>
      </div>
    </form>
  </div>

  <!-- Inline Script to handle submission and validation -->
  <script is:inline>
    document.addEventListener('DOMContentLoaded', () => {
      const form = document.getElementById('contact-form');
      const errorMessage = document.getElementById('error-message');
      const successMessage = document.getElementById('success-message');

      const emailInput = document.getElementById('email');

      // Simple regex check
      function isValidEmail(email) {
        return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
      }

      form.addEventListener('submit', async (e) => {
        e.preventDefault();

        // Validate all required fields
        let allValid = true;
        form.querySelectorAll('input, textarea').forEach(field => {
          if (field.required && !field.value.trim()) {
            allValid = false;
          }
        });

        // Additional checks for email format
        if (!isValidEmail(emailInput.value)) {
          allValid = false;
        }

        if (!allValid) {
          // Show error, hide success
          errorMessage.classList.remove('hidden');
          successMessage.classList.add('hidden');
          return;
        }

        // Hide error
        errorMessage.classList.add('hidden');

        // Prepare form data
        const formData = new FormData(form);

        try {
          // Submit to Google Forms
          await fetch(form.action, {
            method: 'POST',
            mode: 'no-cors',
            body: formData
          });

          // Show success message
          successMessage.classList.remove('hidden');
          form.reset();

          // Hide success after 5 seconds
          setTimeout(() => {
            successMessage.classList.add('hidden');
          }, 5000);
        } catch (error) {
          console.error('Error:', error);
          alert('An error occurred while submitting the form. Please try again.');
        }
      });
    });
  </script>
</section>